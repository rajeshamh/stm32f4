
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b04  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cac  08000cac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cac  08000cac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000cac  08000cac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cac  08000cac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cac  08000cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08000cc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08000cc0  00020054  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e8c  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000054b  00000000  00000000  00021ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00022410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000168  00000000  00000000  000225b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024ec  00000000  00000000  00022718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001afe  00000000  00000000  00024c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a276  00000000  00000000  00026702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00030978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000060c  00000000  00000000  000309cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c94 	.word	0x08000c94

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	08000c94 	.word	0x08000c94

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
#define	LED_PIN          9

char Tx_Data[]="Hello World";

void delay(int data)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;i<data*data*2;i++);
 8000200:	2300      	movs	r3, #0
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	e002      	b.n	800020c <delay+0x14>
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	3301      	adds	r3, #1
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	fb03 f303 	mul.w	r3, r3, r3
 8000212:	005b      	lsls	r3, r3, #1
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	429a      	cmp	r2, r3
 8000218:	dbf5      	blt.n	8000206 <delay+0xe>
}
 800021a:	bf00      	nop
 800021c:	bf00      	nop
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
	...

08000228 <SPI_GPIOinit>:



void  SPI_GPIOinit()
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

	gpio_con.pGPIOx=GPIOB;
 800022c:	4b15      	ldr	r3, [pc, #84]	; (8000284 <SPI_GPIOinit+0x5c>)
 800022e:	4a16      	ldr	r2, [pc, #88]	; (8000288 <SPI_GPIOinit+0x60>)
 8000230:	601a      	str	r2, [r3, #0]
	gpio_con.GPIO_PinConfig.GPIO_Pinmode=GPIO_MODE_ALTFN;
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <SPI_GPIOinit+0x5c>)
 8000234:	2202      	movs	r2, #2
 8000236:	715a      	strb	r2, [r3, #5]
	gpio_con.GPIO_PinConfig.GPIO_PinAltfunmode=5;//AF5
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <SPI_GPIOinit+0x5c>)
 800023a:	2205      	movs	r2, #5
 800023c:	725a      	strb	r2, [r3, #9]
	gpio_con.GPIO_PinConfig.GPIO_Pin_Outputtype=GPIO_OP_TYPE_PP;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <SPI_GPIOinit+0x5c>)
 8000240:	2200      	movs	r2, #0
 8000242:	721a      	strb	r2, [r3, #8]
	gpio_con.GPIO_PinConfig.GPIO_PuPdControl=GPIO_NO_PUPD;
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <SPI_GPIOinit+0x5c>)
 8000246:	2200      	movs	r2, #0
 8000248:	71da      	strb	r2, [r3, #7]
	gpio_con.GPIO_PinConfig.GPIO_Pinspeed=GPIO_SPEED_FAST;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <SPI_GPIOinit+0x5c>)
 800024c:	2202      	movs	r2, #2
 800024e:	719a      	strb	r2, [r3, #6]

	//MOSI
	gpio_con.GPIO_PinConfig.GPIO_Pinnumber=GPIO_PIN_NO_15;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <SPI_GPIOinit+0x5c>)
 8000252:	220f      	movs	r2, #15
 8000254:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&gpio_con);
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <SPI_GPIOinit+0x5c>)
 8000258:	f000 f9c8 	bl	80005ec <GPIO_Init>
	//MISO
	gpio_con.GPIO_PinConfig.GPIO_Pinnumber=GPIO_PIN_NO_14;
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <SPI_GPIOinit+0x5c>)
 800025e:	220e      	movs	r2, #14
 8000260:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&gpio_con);
 8000262:	4808      	ldr	r0, [pc, #32]	; (8000284 <SPI_GPIOinit+0x5c>)
 8000264:	f000 f9c2 	bl	80005ec <GPIO_Init>
	//SCLK
	gpio_con.GPIO_PinConfig.GPIO_Pinnumber=GPIO_PIN_NO_13;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <SPI_GPIOinit+0x5c>)
 800026a:	220d      	movs	r2, #13
 800026c:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&gpio_con);
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <SPI_GPIOinit+0x5c>)
 8000270:	f000 f9bc 	bl	80005ec <GPIO_Init>
	//NSS
	gpio_con.GPIO_PinConfig.GPIO_Pinnumber=GPIO_PIN_NO_12;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <SPI_GPIOinit+0x5c>)
 8000276:	220c      	movs	r2, #12
 8000278:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&gpio_con);
 800027a:	4802      	ldr	r0, [pc, #8]	; (8000284 <SPI_GPIOinit+0x5c>)
 800027c:	f000 f9b6 	bl	80005ec <GPIO_Init>


}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000048 	.word	0x20000048
 8000288:	40020400 	.word	0x40020400

0800028c <SPI2_InIt>:

void SPI2_InIt()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	spi_con.pSPIx=SPI2;
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <SPI2_InIt+0x40>)
 8000292:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <SPI2_InIt+0x44>)
 8000294:	601a      	str	r2, [r3, #0]
	spi_con.SPI_Pinconfig.SPI_BusConfig=SPI_Bus_Config_FD;
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <SPI2_InIt+0x40>)
 8000298:	2201      	movs	r2, #1
 800029a:	715a      	strb	r2, [r3, #5]
	spi_con.SPI_Pinconfig.SPI_DeviceMode=SPI_DEVICE_MODE_MASTER;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <SPI2_InIt+0x40>)
 800029e:	2201      	movs	r2, #1
 80002a0:	711a      	strb	r2, [r3, #4]
	spi_con.SPI_Pinconfig.SPI_SclkSpeed=SPI_SCLK_DIV2;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <SPI2_InIt+0x40>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	719a      	strb	r2, [r3, #6]
	spi_con.SPI_Pinconfig.SPI_DFF=SPI_DFF_8BITS;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <SPI2_InIt+0x40>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	71da      	strb	r2, [r3, #7]
	spi_con.SPI_Pinconfig.SPI_CPHA=SPI_CPHA_LOW;
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <SPI2_InIt+0x40>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	725a      	strb	r2, [r3, #9]
	spi_con.SPI_Pinconfig.SPI_CPOL=SPI_CPOL_LOW;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <SPI2_InIt+0x40>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	721a      	strb	r2, [r3, #8]
	spi_con.SPI_Pinconfig.SPI_SSM=SPI_SSM_DI;
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <SPI2_InIt+0x40>)
 80002bc:	2200      	movs	r2, #0
 80002be:	729a      	strb	r2, [r3, #10]

	SPI_Init(&spi_con);
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <SPI2_InIt+0x40>)
 80002c2:	f000 fbaf 	bl	8000a24 <SPI_Init>

}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	20000028 	.word	0x20000028
 80002d0:	40003800 	.word	0x40003800

080002d4 <toggleonpress>:


void toggleonpress()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
	GPIO_Handle_t buttonled;
	buttonled.pGPIOx=GPIOA;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <toggleonpress+0x2c>)
 80002dc:	607b      	str	r3, [r7, #4]
	buttonled.GPIO_PinConfig.GPIO_Pinnumber= GPIO_PIN_NO_0;
 80002de:	2300      	movs	r3, #0
 80002e0:	723b      	strb	r3, [r7, #8]
	buttonled.GPIO_PinConfig.GPIO_Pinmode= GPIO_MODE_IN;
 80002e2:	2300      	movs	r3, #0
 80002e4:	727b      	strb	r3, [r7, #9]
	buttonled.GPIO_PinConfig.GPIO_PuPdControl=GPIO_NO_PUPD;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72fb      	strb	r3, [r7, #11]
	buttonled.GPIO_PinConfig.GPIO_Pinspeed=GPIO_SPEED_FAST;
 80002ea:	2302      	movs	r3, #2
 80002ec:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&buttonled);
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f97b 	bl	80005ec <GPIO_Init>


}
 80002f6:	bf00      	nop
 80002f8:	3710      	adds	r7, #16
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40020000 	.word	0x40020000

08000304 <SPI_Verifyslave_Response>:

uint8_t	SPI_Verifyslave_Response(uint8_t data)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	if(data==0xF5)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	2bf5      	cmp	r3, #245	; 0xf5
 8000312:	d101      	bne.n	8000318 <SPI_Verifyslave_Response+0x14>
	{
		//for ack
		return 0;
 8000314:	2300      	movs	r3, #0
 8000316:	e000      	b.n	800031a <SPI_Verifyslave_Response+0x16>

	}
	else return 0;
 8000318:	2300      	movs	r3, #0
}
 800031a:	4618      	mov	r0, r3
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr

08000324 <main>:
int main()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0


	uint8_t dummy_byte=0xff;
 800032a:	23ff      	movs	r3, #255	; 0xff
 800032c:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_Read;
	toggleonpress();
 800032e:	f7ff ffd1 	bl	80002d4 <toggleonpress>
    //This Function is used to INitialise the GPIO as SPI
	SPI_GPIOinit();
 8000332:	f7ff ff79 	bl	8000228 <SPI_GPIOinit>
	//This Function is used to Configure the Peripheral
	SPI2_InIt();
 8000336:	f7ff ffa9 	bl	800028c <SPI2_InIt>

	SPI_SSOEConfig(SPI2,ENABLE );
 800033a:	2101      	movs	r1, #1
 800033c:	482b      	ldr	r0, [pc, #172]	; (80003ec <main+0xc8>)
 800033e:	f000 fbe7 	bl	8000b10 <SPI_SSOEConfig>
	while(1)
	{
		//wait till button to be pressed
		while(! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0));
 8000342:	bf00      	nop
 8000344:	2100      	movs	r1, #0
 8000346:	482a      	ldr	r0, [pc, #168]	; (80003f0 <main+0xcc>)
 8000348:	f000 fae8 	bl	800091c <GPIO_ReadFromInputPin>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f8      	beq.n	8000344 <main+0x20>
		delay(500);
 8000352:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000356:	f7ff ff4f 	bl	80001f8 <delay>

		//This Function is used to Enable the SPI Peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 800035a:	2101      	movs	r1, #1
 800035c:	4823      	ldr	r0, [pc, #140]	; (80003ec <main+0xc8>)
 800035e:	f000 fbbc 	bl	8000ada <SPI_PeripheralControl>

		//commnad_cntrl  pin_no  value
		uint8_t ack_bbyte;
		uint8_t args[2];
	    uint8_t command_code=COMMAND_LED_CNTRL;
 8000362:	2350      	movs	r3, #80	; 0x50
 8000364:	71fb      	strb	r3, [r7, #7]
	    SPI_Transmit(SPI2,&command_code,1);
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	2201      	movs	r2, #1
 800036a:	4619      	mov	r1, r3
 800036c:	481f      	ldr	r0, [pc, #124]	; (80003ec <main+0xc8>)
 800036e:	f000 fbfe 	bl	8000b6e <SPI_Transmit>
	    //To clear the RXNE_FLAg
	    SPI_Receive(SPI2,&dummy_Read,1);
 8000372:	f107 030e 	add.w	r3, r7, #14
 8000376:	2201      	movs	r2, #1
 8000378:	4619      	mov	r1, r3
 800037a:	481c      	ldr	r0, [pc, #112]	; (80003ec <main+0xc8>)
 800037c:	f000 fc2e 	bl	8000bdc <SPI_Receive>
	    //send some dummy data to fetch the slave response
	    SPI_Transmit(SPI2,&dummy_byte,1);
 8000380:	f107 030f 	add.w	r3, r7, #15
 8000384:	2201      	movs	r2, #1
 8000386:	4619      	mov	r1, r3
 8000388:	4818      	ldr	r0, [pc, #96]	; (80003ec <main+0xc8>)
 800038a:	f000 fbf0 	bl	8000b6e <SPI_Transmit>

	    //read the ack byte
	    SPI_Receive(SPI2,&ack_bbyte,1);
 800038e:	f107 030d 	add.w	r3, r7, #13
 8000392:	2201      	movs	r2, #1
 8000394:	4619      	mov	r1, r3
 8000396:	4815      	ldr	r0, [pc, #84]	; (80003ec <main+0xc8>)
 8000398:	f000 fc20 	bl	8000bdc <SPI_Receive>

	    //verify the slave response
	    if(SPI_Verifyslave_Response(ack_bbyte))
 800039c:	7b7b      	ldrb	r3, [r7, #13]
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ffb0 	bl	8000304 <SPI_Verifyslave_Response>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d00a      	beq.n	80003c0 <main+0x9c>
	    		{
	    	     args[0]=LED_PIN;
 80003aa:	2309      	movs	r3, #9
 80003ac:	723b      	strb	r3, [r7, #8]
	    	     args[1]=LED_ON;
 80003ae:	2301      	movs	r3, #1
 80003b0:	727b      	strb	r3, [r7, #9]
	    	     SPI_Transmit(SPI2,&args,2);
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	2202      	movs	r2, #2
 80003b8:	4619      	mov	r1, r3
 80003ba:	480c      	ldr	r0, [pc, #48]	; (80003ec <main+0xc8>)
 80003bc:	f000 fbd7 	bl	8000b6e <SPI_Transmit>
	    		}

		//this function is used to send the data
		SPI_Transmit(SPI2,(uint8_t *)Tx_Data,strlen(Tx_Data));
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <main+0xd0>)
 80003c2:	f7ff ff11 	bl	80001e8 <strlen>
 80003c6:	4603      	mov	r3, r0
 80003c8:	461a      	mov	r2, r3
 80003ca:	490a      	ldr	r1, [pc, #40]	; (80003f4 <main+0xd0>)
 80003cc:	4807      	ldr	r0, [pc, #28]	; (80003ec <main+0xc8>)
 80003ce:	f000 fbce 	bl	8000b6e <SPI_Transmit>

		//before disabling check for busy flag,if not busy then disable it
	    while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 80003d2:	bf00      	nop
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <main+0xc8>)
 80003d8:	f000 fbb5 	bl	8000b46 <SPI_GetFlagStatus>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f8      	bne.n	80003d4 <main+0xb0>

		SPI_PeripheralControl(SPI2,DISABLE);
 80003e2:	2100      	movs	r1, #0
 80003e4:	4801      	ldr	r0, [pc, #4]	; (80003ec <main+0xc8>)
 80003e6:	f000 fb78 	bl	8000ada <SPI_PeripheralControl>
	{
 80003ea:	e7aa      	b.n	8000342 <main+0x1e>
 80003ec:	40003800 	.word	0x40003800
 80003f0:	40020000 	.word	0x40020000
 80003f4:	20000000 	.word	0x20000000

080003f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	; (8000438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	; (8000444 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000426:	f000 fc11 	bl	8000c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042a:	f7ff ff7b 	bl	8000324 <main>

0800042e <LoopForever>:

LoopForever:
    b LoopForever
 800042e:	e7fe      	b.n	800042e <LoopForever>
  ldr   r0, =_estack
 8000430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800043c:	08000cb4 	.word	0x08000cb4
  ldr r2, =_sbss
 8000440:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000444:	20000054 	.word	0x20000054

08000448 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <GPIO_PeriClockControl>:
 *
 *
*/

void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx,uint8_t EnorDi)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	460b      	mov	r3, r1
 8000456:	70fb      	strb	r3, [r7, #3]
	 if(EnorDi == ENABLE)
 8000458:	78fb      	ldrb	r3, [r7, #3]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d157      	bne.n	800050e <GPIO_PeriClockControl+0xc2>
		 {
			if(pGPIOx == GPIOA)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a59      	ldr	r2, [pc, #356]	; (80005c8 <GPIO_PeriClockControl+0x17c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0x28>
			{
				GPIOA_PCLK_EN() ;
 8000466:	4b59      	ldr	r3, [pc, #356]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a58      	ldr	r2, [pc, #352]	; (80005cc <GPIO_PeriClockControl+0x180>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
		 		 GPIOI_PCLK_DI() ;
		 	 }
		}


}
 8000472:	e0a3      	b.n	80005bc <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOB)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a56      	ldr	r2, [pc, #344]	; (80005d0 <GPIO_PeriClockControl+0x184>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0x3e>
				GPIOB_PCLK_EN() ;
 800047c:	4b53      	ldr	r3, [pc, #332]	; (80005cc <GPIO_PeriClockControl+0x180>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a52      	ldr	r2, [pc, #328]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000482:	f043 0302 	orr.w	r3, r3, #2
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000488:	e098      	b.n	80005bc <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOC)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a51      	ldr	r2, [pc, #324]	; (80005d4 <GPIO_PeriClockControl+0x188>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0x54>
				GPIOC_PCLK_EN() ;
 8000492:	4b4e      	ldr	r3, [pc, #312]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a4d      	ldr	r2, [pc, #308]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000498:	f043 0304 	orr.w	r3, r3, #4
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049e:	e08d      	b.n	80005bc <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOD)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a4d      	ldr	r2, [pc, #308]	; (80005d8 <GPIO_PeriClockControl+0x18c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d106      	bne.n	80004b6 <GPIO_PeriClockControl+0x6a>
				GPIOD_PCLK_EN() ;
 80004a8:	4b48      	ldr	r3, [pc, #288]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a47      	ldr	r2, [pc, #284]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b4:	e082      	b.n	80005bc <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOE)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a48      	ldr	r2, [pc, #288]	; (80005dc <GPIO_PeriClockControl+0x190>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d106      	bne.n	80004cc <GPIO_PeriClockControl+0x80>
				GPIOE_PCLK_EN() ;
 80004be:	4b43      	ldr	r3, [pc, #268]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	4a42      	ldr	r2, [pc, #264]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80004c4:	f043 0310 	orr.w	r3, r3, #16
 80004c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ca:	e077      	b.n	80005bc <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOF)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a44      	ldr	r2, [pc, #272]	; (80005e0 <GPIO_PeriClockControl+0x194>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d106      	bne.n	80004e2 <GPIO_PeriClockControl+0x96>
				GPIOF_PCLK_EN() ;
 80004d4:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d8:	4a3c      	ldr	r2, [pc, #240]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e0:	e06c      	b.n	80005bc <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOH)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a3f      	ldr	r2, [pc, #252]	; (80005e4 <GPIO_PeriClockControl+0x198>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeriClockControl+0xac>
				GPIOH_PCLK_EN() ;
 80004ea:	4b38      	ldr	r3, [pc, #224]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a37      	ldr	r2, [pc, #220]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80004f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f6:	e061      	b.n	80005bc <GPIO_PeriClockControl+0x170>
			else if(pGPIOx == GPIOI)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a3b      	ldr	r2, [pc, #236]	; (80005e8 <GPIO_PeriClockControl+0x19c>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d15d      	bne.n	80005bc <GPIO_PeriClockControl+0x170>
				GPIOI_PCLK_EN() ;
 8000500:	4b32      	ldr	r3, [pc, #200]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a31      	ldr	r2, [pc, #196]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050c:	e056      	b.n	80005bc <GPIO_PeriClockControl+0x170>
		 	 if(pGPIOx == GPIOA)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4a2d      	ldr	r2, [pc, #180]	; (80005c8 <GPIO_PeriClockControl+0x17c>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d106      	bne.n	8000524 <GPIO_PeriClockControl+0xd8>
		 		 GPIOA_PCLK_DI() ;
 8000516:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a2c      	ldr	r2, [pc, #176]	; (80005cc <GPIO_PeriClockControl+0x180>)
 800051c:	f023 0301 	bic.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000522:	e04b      	b.n	80005bc <GPIO_PeriClockControl+0x170>
		 	 else if(pGPIOx == GPIOB)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a2a      	ldr	r2, [pc, #168]	; (80005d0 <GPIO_PeriClockControl+0x184>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d106      	bne.n	800053a <GPIO_PeriClockControl+0xee>
		 		 GPIOB_PCLK_DI() ;
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <GPIO_PeriClockControl+0x180>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4a26      	ldr	r2, [pc, #152]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000532:	f023 0302 	bic.w	r3, r3, #2
 8000536:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000538:	e040      	b.n	80005bc <GPIO_PeriClockControl+0x170>
		 	 else if(pGPIOx == GPIOC)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a25      	ldr	r2, [pc, #148]	; (80005d4 <GPIO_PeriClockControl+0x188>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d106      	bne.n	8000550 <GPIO_PeriClockControl+0x104>
		 		 GPIOC_PCLK_DI() ;
 8000542:	4b22      	ldr	r3, [pc, #136]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a21      	ldr	r2, [pc, #132]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000548:	f023 0304 	bic.w	r3, r3, #4
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800054e:	e035      	b.n	80005bc <GPIO_PeriClockControl+0x170>
		 	 else if(pGPIOx == GPIOD)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <GPIO_PeriClockControl+0x18c>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d106      	bne.n	8000566 <GPIO_PeriClockControl+0x11a>
		 		 GPIOD_PCLK_DI() ;
 8000558:	4b1c      	ldr	r3, [pc, #112]	; (80005cc <GPIO_PeriClockControl+0x180>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	4a1b      	ldr	r2, [pc, #108]	; (80005cc <GPIO_PeriClockControl+0x180>)
 800055e:	f023 0308 	bic.w	r3, r3, #8
 8000562:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000564:	e02a      	b.n	80005bc <GPIO_PeriClockControl+0x170>
		 	 else if(pGPIOx == GPIOE)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <GPIO_PeriClockControl+0x190>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d106      	bne.n	800057c <GPIO_PeriClockControl+0x130>
		 		 GPIOE_PCLK_DI() ;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000574:	f023 0310 	bic.w	r3, r3, #16
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057a:	e01f      	b.n	80005bc <GPIO_PeriClockControl+0x170>
		 	 else if(pGPIOx == GPIOF)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <GPIO_PeriClockControl+0x194>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d106      	bne.n	8000592 <GPIO_PeriClockControl+0x146>
		 		 GPIOF_PCLK_DI() ;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <GPIO_PeriClockControl+0x180>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <GPIO_PeriClockControl+0x180>)
 800058a:	f023 0320 	bic.w	r3, r3, #32
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000590:	e014      	b.n	80005bc <GPIO_PeriClockControl+0x170>
		 	 else if(pGPIOx == GPIOH)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <GPIO_PeriClockControl+0x198>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d106      	bne.n	80005a8 <GPIO_PeriClockControl+0x15c>
		 		 GPIOH_PCLK_DI() ;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <GPIO_PeriClockControl+0x180>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80005a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a6:	e009      	b.n	80005bc <GPIO_PeriClockControl+0x170>
		 	 else if(pGPIOx == GPIOI)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <GPIO_PeriClockControl+0x19c>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d105      	bne.n	80005bc <GPIO_PeriClockControl+0x170>
		 		 GPIOI_PCLK_DI() ;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <GPIO_PeriClockControl+0x180>)
 80005b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020400 	.word	0x40020400
 80005d4:	40020800 	.word	0x40020800
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40021400 	.word	0x40021400
 80005e4:	40021c00 	.word	0x40021c00
 80005e8:	40022000 	.word	0x40022000

080005ec <GPIO_Init>:
 *
 *
*/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	//enable th eclock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff26 	bl	800044c <GPIO_PeriClockControl>




	uint32_t temp=0;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
    /* FIRST WE NEDD CONFIGURE THE PIN MODE  */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode<=GPIO_MODE_ANALOG)	//here wr are accessing the mode value enter by the user,and we are checking it ,=3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	2b03      	cmp	r3, #3
 800060a:	d81f      	bhi.n	800064c <GPIO_Init+0x60>
	{   //non interrupted mode
	    temp=((pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode)<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber));//each pin corresponds to 2 bits in moder registeer
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	461a      	mov	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	fa02 f303 	lsl.w	r3, r2, r3
 800061c:	617b      	str	r3, [r7, #20]
	    pGPIOHandle->pGPIOx->MODER&=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	2303      	movs	r3, #3
 800062c:	408b      	lsls	r3, r1
 800062e:	43db      	mvns	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	400a      	ands	r2, r1
 8000638:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER|=temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6819      	ldr	r1, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	697a      	ldr	r2, [r7, #20]
 8000646:	430a      	orrs	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	e0c4      	b.n	80007d6 <GPIO_Init+0x1ea>
	}
	else
	{
		//interrupted mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode==GPIO_MODE_IT_RT)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	795b      	ldrb	r3, [r3, #5]
 8000650:	2b05      	cmp	r3, #5
 8000652:	d117      	bne.n	8000684 <GPIO_Init+0x98>
		{
			//set rtsr register
			EXTI->RTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);
 8000654:	4b4a      	ldr	r3, [pc, #296]	; (8000780 <GPIO_Init+0x194>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	7912      	ldrb	r2, [r2, #4]
 800065c:	4611      	mov	r1, r2
 800065e:	2201      	movs	r2, #1
 8000660:	408a      	lsls	r2, r1
 8000662:	4611      	mov	r1, r2
 8000664:	4a46      	ldr	r2, [pc, #280]	; (8000780 <GPIO_Init+0x194>)
 8000666:	430b      	orrs	r3, r1
 8000668:	6093      	str	r3, [r2, #8]
			//clear corresponding ftsr bit
			EXTI->FTSR&=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);
 800066a:	4b45      	ldr	r3, [pc, #276]	; (8000780 <GPIO_Init+0x194>)
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	7912      	ldrb	r2, [r2, #4]
 8000672:	4611      	mov	r1, r2
 8000674:	2201      	movs	r2, #1
 8000676:	408a      	lsls	r2, r1
 8000678:	43d2      	mvns	r2, r2
 800067a:	4611      	mov	r1, r2
 800067c:	4a40      	ldr	r2, [pc, #256]	; (8000780 <GPIO_Init+0x194>)
 800067e:	400b      	ands	r3, r1
 8000680:	60d3      	str	r3, [r2, #12]
 8000682:	e035      	b.n	80006f0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode==GPIO_MODE_IT_FT)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	795b      	ldrb	r3, [r3, #5]
 8000688:	2b04      	cmp	r3, #4
 800068a:	d117      	bne.n	80006bc <GPIO_Init+0xd0>
		{
			//set FTSR register
			EXTI->FTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);
 800068c:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <GPIO_Init+0x194>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7912      	ldrb	r2, [r2, #4]
 8000694:	4611      	mov	r1, r2
 8000696:	2201      	movs	r2, #1
 8000698:	408a      	lsls	r2, r1
 800069a:	4611      	mov	r1, r2
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <GPIO_Init+0x194>)
 800069e:	430b      	orrs	r3, r1
 80006a0:	60d3      	str	r3, [r2, #12]
			//Clear the RTSR
			EXTI->RTSR&=~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);
 80006a2:	4b37      	ldr	r3, [pc, #220]	; (8000780 <GPIO_Init+0x194>)
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	7912      	ldrb	r2, [r2, #4]
 80006aa:	4611      	mov	r1, r2
 80006ac:	2201      	movs	r2, #1
 80006ae:	408a      	lsls	r2, r1
 80006b0:	43d2      	mvns	r2, r2
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a32      	ldr	r2, [pc, #200]	; (8000780 <GPIO_Init+0x194>)
 80006b6:	400b      	ands	r3, r1
 80006b8:	6093      	str	r3, [r2, #8]
 80006ba:	e019      	b.n	80006f0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode==GPIO_MODE_IT_RFT)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	795b      	ldrb	r3, [r3, #5]
 80006c0:	2b06      	cmp	r3, #6
 80006c2:	d115      	bne.n	80006f0 <GPIO_Init+0x104>
		{
			EXTI->RTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <GPIO_Init+0x194>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	7912      	ldrb	r2, [r2, #4]
 80006cc:	4611      	mov	r1, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	408a      	lsls	r2, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a2a      	ldr	r2, [pc, #168]	; (8000780 <GPIO_Init+0x194>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <GPIO_Init+0x194>)
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	7912      	ldrb	r2, [r2, #4]
 80006e2:	4611      	mov	r1, r2
 80006e4:	2201      	movs	r2, #1
 80006e6:	408a      	lsls	r2, r1
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a25      	ldr	r2, [pc, #148]	; (8000780 <GPIO_Init+0x194>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	60d3      	str	r3, [r2, #12]
		}
		//configure the gpio port slection in syscfg
		 uint8_t temp=pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber/4;//to determine which control regitser to assign
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	74fb      	strb	r3, [r7, #19]
		 uint8_t temp1=pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber%4;//to determine which section the pin or port to be assigned
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	f003 0303 	and.w	r3, r3, #3
 8000700:	74bb      	strb	r3, [r7, #18]
		 uint8_t portcode=GPIOX_BASEEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <GPIO_Init+0x198>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d04d      	beq.n	80007a8 <GPIO_Init+0x1bc>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <GPIO_Init+0x19c>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d032      	beq.n	800077c <GPIO_Init+0x190>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a1c      	ldr	r2, [pc, #112]	; (800078c <GPIO_Init+0x1a0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d02b      	beq.n	8000778 <GPIO_Init+0x18c>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1a      	ldr	r2, [pc, #104]	; (8000790 <GPIO_Init+0x1a4>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d024      	beq.n	8000774 <GPIO_Init+0x188>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a19      	ldr	r2, [pc, #100]	; (8000794 <GPIO_Init+0x1a8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d01d      	beq.n	8000770 <GPIO_Init+0x184>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <GPIO_Init+0x1ac>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d016      	beq.n	800076c <GPIO_Init+0x180>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <GPIO_Init+0x1b0>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d00f      	beq.n	8000768 <GPIO_Init+0x17c>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <GPIO_Init+0x1b4>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d008      	beq.n	8000764 <GPIO_Init+0x178>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <GPIO_Init+0x1b8>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d101      	bne.n	8000760 <GPIO_Init+0x174>
 800075c:	2308      	movs	r3, #8
 800075e:	e024      	b.n	80007aa <GPIO_Init+0x1be>
 8000760:	2300      	movs	r3, #0
 8000762:	e022      	b.n	80007aa <GPIO_Init+0x1be>
 8000764:	2307      	movs	r3, #7
 8000766:	e020      	b.n	80007aa <GPIO_Init+0x1be>
 8000768:	2306      	movs	r3, #6
 800076a:	e01e      	b.n	80007aa <GPIO_Init+0x1be>
 800076c:	2305      	movs	r3, #5
 800076e:	e01c      	b.n	80007aa <GPIO_Init+0x1be>
 8000770:	2304      	movs	r3, #4
 8000772:	e01a      	b.n	80007aa <GPIO_Init+0x1be>
 8000774:	2303      	movs	r3, #3
 8000776:	e018      	b.n	80007aa <GPIO_Init+0x1be>
 8000778:	2302      	movs	r3, #2
 800077a:	e016      	b.n	80007aa <GPIO_Init+0x1be>
 800077c:	2301      	movs	r3, #1
 800077e:	e014      	b.n	80007aa <GPIO_Init+0x1be>
 8000780:	40013c00 	.word	0x40013c00
 8000784:	40020000 	.word	0x40020000
 8000788:	40020400 	.word	0x40020400
 800078c:	40020800 	.word	0x40020800
 8000790:	40020c00 	.word	0x40020c00
 8000794:	40021000 	.word	0x40021000
 8000798:	40021400 	.word	0x40021400
 800079c:	40021800 	.word	0x40021800
 80007a0:	40021c00 	.word	0x40021c00
 80007a4:	40022000 	.word	0x40022000
 80007a8:	2300      	movs	r3, #0
 80007aa:	747b      	strb	r3, [r7, #17]
		 SYSCFG->EXTICR[temp]=portcode<<(4*temp1);//we are left shifting 4*temp1 times the port code ,determines the which pin of the CR to be configure to a port
 80007ac:	7c7a      	ldrb	r2, [r7, #17]
 80007ae:	7cbb      	ldrb	r3, [r7, #18]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	fa02 f103 	lsl.w	r1, r2, r3
 80007b6:	4a57      	ldr	r2, [pc, #348]	; (8000914 <GPIO_Init+0x328>)
 80007b8:	7cfb      	ldrb	r3, [r7, #19]
 80007ba:	3302      	adds	r3, #2
 80007bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]



		//enable the interrupt delivery using the IMR register

		EXTI->IMR|=(1<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);//when we enable the
 80007c0:	4b55      	ldr	r3, [pc, #340]	; (8000918 <GPIO_Init+0x32c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	7912      	ldrb	r2, [r2, #4]
 80007c8:	4611      	mov	r1, r2
 80007ca:	2201      	movs	r2, #1
 80007cc:	408a      	lsls	r2, r1
 80007ce:	4611      	mov	r1, r2
 80007d0:	4a51      	ldr	r2, [pc, #324]	; (8000918 <GPIO_Init+0x32c>)
 80007d2:	430b      	orrs	r3, r1
 80007d4:	6013      	str	r3, [r2, #0]

	}

	 /* FIRST WE NEDD CONFIGURE THE PIN speed MODE  */

	temp=0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
	temp=((pGPIOHandle->GPIO_PinConfig.GPIO_Pinspeed)<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	799b      	ldrb	r3, [r3, #6]
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR  &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	4619      	mov	r1, r3
 80007f8:	2303      	movs	r3, #3
 80007fa:	408b      	lsls	r3, r1
 80007fc:	43db      	mvns	r3, r3
 80007fe:	4619      	mov	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	400a      	ands	r2, r1
 8000806:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |=temp;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	6899      	ldr	r1, [r3, #8]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	430a      	orrs	r2, r1
 8000816:	609a      	str	r2, [r3, #8]

	 temp=0;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
	/* OUTPUT TYPE */
    temp=((pGPIOHandle->GPIO_PinConfig.GPIO_Pin_Outputtype)<<(pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7a1b      	ldrb	r3, [r3, #8]
 8000820:	461a      	mov	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	4619      	mov	r1, r3
 8000838:	2301      	movs	r3, #1
 800083a:	408b      	lsls	r3, r1
 800083c:	43db      	mvns	r3, r3
 800083e:	4619      	mov	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	400a      	ands	r2, r1
 8000846:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |=temp;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6859      	ldr	r1, [r3, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	430a      	orrs	r2, r1
 8000856:	605a      	str	r2, [r3, #4]

    /*output pushpull contol register*
     */
    temp=0;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
    temp=((pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl)<<(2*pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	79db      	ldrb	r3, [r3, #7]
 8000860:	461a      	mov	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	791b      	ldrb	r3, [r3, #4]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber);//clearing the corresponding bits
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	4619      	mov	r1, r3
 800087a:	2303      	movs	r3, #3
 800087c:	408b      	lsls	r3, r1
 800087e:	43db      	mvns	r3, r3
 8000880:	4619      	mov	r1, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	400a      	ands	r2, r1
 8000888:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |=temp;                                               //setting the corresponding bits
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68d9      	ldr	r1, [r3, #12]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	430a      	orrs	r2, r1
 8000898:	60da      	str	r2, [r3, #12]


    temp=0;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
    //Alternate function mode
    if(pGPIOHandle->GPIO_PinConfig.GPIO_Pinmode==GPIO_MODE_ALTFN)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	795b      	ldrb	r3, [r3, #5]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d131      	bne.n	800090a <GPIO_Init+0x31e>
    {
    	uint8_t temp1,temp2;
    	temp1=pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber/8;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	08db      	lsrs	r3, r3, #3
 80008ac:	743b      	strb	r3, [r7, #16]
    	temp2=pGPIOHandle->GPIO_PinConfig.GPIO_Pinnumber%8;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	791b      	ldrb	r3, [r3, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	73fb      	strb	r3, [r7, #15]
    	pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF<<(4*temp2));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	7c3a      	ldrb	r2, [r7, #16]
 80008be:	3208      	adds	r2, #8
 80008c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	220f      	movs	r2, #15
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	7c3a      	ldrb	r2, [r7, #16]
 80008d8:	4001      	ands	r1, r0
 80008da:	3208      	adds	r2, #8
 80008dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltfunmode<<(4*temp2));
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	7c3a      	ldrb	r2, [r7, #16]
 80008e6:	3208      	adds	r2, #8
 80008e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7a5b      	ldrb	r3, [r3, #9]
 80008f0:	461a      	mov	r2, r3
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	4618      	mov	r0, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	7c3a      	ldrb	r2, [r7, #16]
 8000902:	4301      	orrs	r1, r0
 8000904:	3208      	adds	r2, #8
 8000906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    }

 }
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40013800 	.word	0x40013800
 8000918:	40013c00 	.word	0x40013c00

0800091c <GPIO_ReadFromInputPin>:
 *
 *
*/

uint8_t	 GPIO_ReadFromInputPin(GPIO_Regdef_t *pGPIOx,uint8_t Pinnumber)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value=(uint8_t)((pGPIOx->IDR>>Pinnumber)&(0x00000001));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	691a      	ldr	r2, [r3, #16]
 800092c:	78fb      	ldrb	r3, [r7, #3]
 800092e:	fa22 f303 	lsr.w	r3, r2, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]

	return value;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
	...

08000948 <SPI_PeriClockControl>:
 *
 *
*/

void SPI_PeriClockControl(SPI_Regdef_t *pSPIx,uint8_t EnorDi)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d12b      	bne.n	80009b2 <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx==SPI1)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <SPI_PeriClockControl+0xcc>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d106      	bne.n	8000970 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000962:	4b2d      	ldr	r3, [pc, #180]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a2c      	ldr	r2, [pc, #176]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 8000968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx==SPI3)
			{
			SPI4_PCLK_DI();
			}
	}
}
 800096e:	e04b      	b.n	8000a08 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI2)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <SPI_PeriClockControl+0xd4>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d106      	bne.n	8000986 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000984:	e040      	b.n	8000a08 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI3)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <SPI_PeriClockControl+0xd8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d106      	bne.n	800099c <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 8000994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
}
 800099a:	e035      	b.n	8000a08 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI3)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <SPI_PeriClockControl+0xd8>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d131      	bne.n	8000a08 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 80009aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ae:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009b0:	e02a      	b.n	8000a08 <SPI_PeriClockControl+0xc0>
		if(pSPIx==SPI1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <SPI_PeriClockControl+0xcc>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d106      	bne.n	80009c8 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 80009c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009c6:	e01f      	b.n	8000a08 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <SPI_PeriClockControl+0xd4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d106      	bne.n	80009de <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 80009d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009dc:	e014      	b.n	8000a08 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI3)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <SPI_PeriClockControl+0xd8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d106      	bne.n	80009f4 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 80009ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009f2:	e009      	b.n	8000a08 <SPI_PeriClockControl+0xc0>
		else if(pSPIx==SPI3)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <SPI_PeriClockControl+0xd8>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d105      	bne.n	8000a08 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SPI_PeriClockControl+0xd0>)
 8000a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40013000 	.word	0x40013000
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40003800 	.word	0x40003800
 8000a20:	40003c00 	.word	0x40003c00

08000a24 <SPI_Init>:
 *@note
 *
 *
*********************************/
void 	SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	//enable the clock
	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff88 	bl	8000948 <SPI_PeriClockControl>
	//to collect the bit field
	uint32_t tempreg=0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
    //configure mode
    tempreg|=pSPIHandle->SPI_Pinconfig.SPI_DeviceMode<<SPI_CR1_MSTR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
	//pSPIHandle->pSPIx->CR1|=(pSPIHandle->SPI_Pinconfig.SPI_DeviceMode<<2);

    //bus config
	if (pSPIHandle->SPI_Pinconfig.SPI_BusConfig ==SPI_Bus_Config_FD)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	795b      	ldrb	r3, [r3, #5]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d104      	bne.n	8000a5c <SPI_Init+0x38>
		{
		//clear the bidi bit in the cr1;
		tempreg &=~(1<<SPI_CR1_BIDIMODE)	;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e014      	b.n	8000a86 <SPI_Init+0x62>
		//pSPIHandle->pSPIx->CR1 &= ~(1<<15);//
		}
	else if(pSPIHandle->SPI_Pinconfig.SPI_BusConfig==SPI_Bus_Config_HD)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	795b      	ldrb	r3, [r3, #5]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d104      	bne.n	8000a6e <SPI_Init+0x4a>
		{
		//set the bidi bit in the cr1
		tempreg |=(1<<SPI_CR1_BIDIMODE)	;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	e00b      	b.n	8000a86 <SPI_Init+0x62>
		//	pSPIHandle->pSPIx->CR1|=1<<15;
		}
	else if(pSPIHandle->SPI_Pinconfig.SPI_BusConfig==SPI_Bus_Config_SIMPLX_RX_ONLY)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	795b      	ldrb	r3, [r3, #5]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	d107      	bne.n	8000a86 <SPI_Init+0x62>
		{
		//bidi mode must be cleared
		tempreg &=~(1<<SPI_CR1_BIDIMODE)	;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a7c:	60fb      	str	r3, [r7, #12]
		//pSPIHandle->pSPIx->CR1 &= ~(1<<15);
		//set the rx only bit in the cr1 register
		tempreg |=(1<<SPI_CR1_BIDIMODE);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a84:	60fb      	str	r3, [r7, #12]
		//pSPIHandle->pSPIx->CR1|=1<<10;
		}

	//configure the spi clock speed
	tempreg|=pSPIHandle->SPI_Pinconfig.SPI_SclkSpeed<<SPI_CR1_BR;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	799b      	ldrb	r3, [r3, #6]
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
	//pSPIHandle->pSPIx->CR1|=(pSPIHandle->SPI_Pinconfig.SPI_SclkSpeed<<3);


	//configure the dff
	tempreg|=(pSPIHandle->SPI_Pinconfig.SPI_DFF<<SPI_CR1_DFF);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	79db      	ldrb	r3, [r3, #7]
 8000a98:	02db      	lsls	r3, r3, #11
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
	//pSPIHandle->pSPIx->CR1|=(pSPIHandle->SPI_Pinconfig.SPI_DFF<<11);

	//configure the  cpol
	tempreg|=(pSPIHandle->SPI_Pinconfig.SPI_CPOL<<SPI_CR1_CPOL);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7a1b      	ldrb	r3, [r3, #8]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
	//pSPIHandle->pSPIx->CR1|=(pSPIHandle->SPI_Pinconfig.SPI_CPOL<<1);

	//configure the cpha
	tempreg|=(pSPIHandle->SPI_Pinconfig.SPI_CPHA<<SPI_CR1_CPHA);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7a5b      	ldrb	r3, [r3, #9]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
	//pSPIHandle->pSPIx->CR1|=(pSPIHandle->SPI_Pinconfig.SPI_CPHA<<0);

	//configure the ssm
	tempreg|=(pSPIHandle->SPI_Pinconfig.SPI_SSM<<SPI_CR1_SSM);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	7a9b      	ldrb	r3, [r3, #10]
 8000ac0:	025b      	lsls	r3, r3, #9
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
	//pSPIHandle->pSPIx->CR1|=(pSPIHandle->SPI_Pinconfig.SPI_SSM<<9);

	pSPIHandle->pSPIx->CR1=tempreg;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <SPI_PeripheralControl>:
 *@note			--		To achieve the communication we should enable it after the all configuration
 *
 *
*********************************/
void    SPI_PeripheralControl(SPI_Regdef_t *pSPIx,uint8_t EnorDi)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d106      	bne.n	8000afa <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1|=(1<<SPI_CR1_SPE);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	601a      	str	r2, [r3, #0]
	{

		pSPIx->CR1&=~(1<<SPI_CR1_SPE);

	}
}
 8000af8:	e005      	b.n	8000b06 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1&=~(1<<SPI_CR1_SPE);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <SPI_SSOEConfig>:
 *
 *
*********************************/

void  SPI_SSOEConfig(SPI_Regdef_t *pSPIx,uint8_t EnorDi)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE)
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d106      	bne.n	8000b30 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2|=(1<<SPI_CR2_SSOE);//enabling the slave select output enable,
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f043 0204 	orr.w	r2, r3, #4
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	605a      	str	r2, [r3, #4]
	{

		pSPIx->CR2&=~(1<<SPI_CR2_SSOE);

	}
}
 8000b2e:	e005      	b.n	8000b3c <SPI_SSOEConfig+0x2c>
		pSPIx->CR2&=~(1<<SPI_CR2_SSOE);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f023 0204 	bic.w	r2, r3, #4
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	605a      	str	r2, [r3, #4]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr

08000b46 <SPI_GetFlagStatus>:
 *
 *
*********************************/

uint8_t SPI_GetFlagStatus(SPI_Regdef_t *pSPIx,uint8_t flagnme)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	70fb      	strb	r3, [r7, #3]
	if(pSPIx->SR & flagnme)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SPI_GetFlagStatus+0x1c>
	{
		return FLAG_SET ;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e000      	b.n	8000b64 <SPI_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <SPI_Transmit>:
 *
 *@note
 *
 *****/
void SPI_Transmit(SPI_Regdef_t *pSPIx,uint8_t *pTxbuffer,uint32_t size)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	60f8      	str	r0, [r7, #12]
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
	while(size>0)
 8000b7a:	e027      	b.n	8000bcc <SPI_Transmit+0x5e>
	{

	    //wait till tx buffer gets empty

	   while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 8000b7c:	bf00      	nop
 8000b7e:	2102      	movs	r1, #2
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff ffe0 	bl	8000b46 <SPI_GetFlagStatus>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f8      	beq.n	8000b7e <SPI_Transmit+0x10>
		//while(!(pSPIx->SR  &  1<<SPI_SR_TXE));
	  if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d00e      	beq.n	8000bb6 <SPI_Transmit+0x48>
		{
			pSPIx->DR=*((uint16_t *)pTxbuffer);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	60da      	str	r2, [r3, #12]
			size--;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
			size--;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTxbuffer++;
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	e00a      	b.n	8000bcc <SPI_Transmit+0x5e>
		}else
		{
			pSPIx->DR=*pTxbuffer;
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	60da      	str	r2, [r3, #12]
			size--;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	607b      	str	r3, [r7, #4]
			pTxbuffer++;
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
	while(size>0)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1d4      	bne.n	8000b7c <SPI_Transmit+0xe>
		}

	}
}
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <SPI_Receive>:
 *
 *@note
 *
 *****/
void SPI_Receive(SPI_Regdef_t *pSPIx,uint8_t *pRxbuffer,uint32_t size)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	while(size>0)
 8000be8:	e027      	b.n	8000c3a <SPI_Receive+0x5e>
	{

	    //wait till tx buffer gets empty

		 while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG)==FLAG_RESET);
 8000bea:	bf00      	nop
 8000bec:	2101      	movs	r1, #1
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f7ff ffa9 	bl	8000b46 <SPI_GetFlagStatus>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0f8      	beq.n	8000bec <SPI_Receive+0x10>
		//while(!(pSPIx->SR  &  1<<SPI_SR_RXNE));
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF))
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00e      	beq.n	8000c24 <SPI_Receive+0x48>
		{   //load the data from the DR
			*((uint16_t *)pRxbuffer)=pSPIx->DR;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	801a      	strh	r2, [r3, #0]
			size--;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	607b      	str	r3, [r7, #4]
			size--;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
			(uint16_t *)pRxbuffer++;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	e00a      	b.n	8000c3a <SPI_Receive+0x5e>

		}
		else
		{
			*(pRxbuffer)=pSPIx->DR;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	701a      	strb	r2, [r3, #0]
			size--;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
			pRxbuffer++;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
	while(size>0)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1d4      	bne.n	8000bea <SPI_Receive+0xe>
		}


	}
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <__libc_init_array>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	4d0d      	ldr	r5, [pc, #52]	; (8000c84 <__libc_init_array+0x38>)
 8000c50:	4c0d      	ldr	r4, [pc, #52]	; (8000c88 <__libc_init_array+0x3c>)
 8000c52:	1b64      	subs	r4, r4, r5
 8000c54:	10a4      	asrs	r4, r4, #2
 8000c56:	2600      	movs	r6, #0
 8000c58:	42a6      	cmp	r6, r4
 8000c5a:	d109      	bne.n	8000c70 <__libc_init_array+0x24>
 8000c5c:	4d0b      	ldr	r5, [pc, #44]	; (8000c8c <__libc_init_array+0x40>)
 8000c5e:	4c0c      	ldr	r4, [pc, #48]	; (8000c90 <__libc_init_array+0x44>)
 8000c60:	f000 f818 	bl	8000c94 <_init>
 8000c64:	1b64      	subs	r4, r4, r5
 8000c66:	10a4      	asrs	r4, r4, #2
 8000c68:	2600      	movs	r6, #0
 8000c6a:	42a6      	cmp	r6, r4
 8000c6c:	d105      	bne.n	8000c7a <__libc_init_array+0x2e>
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c74:	4798      	blx	r3
 8000c76:	3601      	adds	r6, #1
 8000c78:	e7ee      	b.n	8000c58 <__libc_init_array+0xc>
 8000c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7e:	4798      	blx	r3
 8000c80:	3601      	adds	r6, #1
 8000c82:	e7f2      	b.n	8000c6a <__libc_init_array+0x1e>
 8000c84:	08000cac 	.word	0x08000cac
 8000c88:	08000cac 	.word	0x08000cac
 8000c8c:	08000cac 	.word	0x08000cac
 8000c90:	08000cb0 	.word	0x08000cb0

08000c94 <_init>:
 8000c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c96:	bf00      	nop
 8000c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9a:	bc08      	pop	{r3}
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	4770      	bx	lr

08000ca0 <_fini>:
 8000ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca2:	bf00      	nop
 8000ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca6:	bc08      	pop	{r3}
 8000ca8:	469e      	mov	lr, r3
 8000caa:	4770      	bx	lr
